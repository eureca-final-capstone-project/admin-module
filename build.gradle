plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}
ext {
    springAiVersion = "1.0.0"
}

group = 'eureca.capstone.project'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // WebFlux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // ai
    implementation 'org.springframework.ai:spring-ai-starter-model-openai'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    // MySQL JDBC 드라이버
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Lombok (컴파일 시 전용)
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:$springAiVersion"
    }
}

// clean 시 Q 클래스 디렉토리 삭제
clean {
    delete file('build/generated/sources/annotationProcessor/java/main')
}

tasks.named('bootJar') {
    mainClass.set('eureca.capstone.project.admin.AdminApplication')
}

tasks.named('compileJava') {
    // 컴파일 시 옵션 추가
    options.compilerArgs += ['-parameters'] // 메서드 파라미터 이름 유지
    options.annotationProcessorPath = configurations.annotationProcessor // Annotation Processor 경로 지정
}

tasks.named('test') {
    useJUnitPlatform()
}